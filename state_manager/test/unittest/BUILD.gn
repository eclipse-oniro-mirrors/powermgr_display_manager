# Copyright (c) 2021-2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("../../../displaymgr.gni")

module_output_path = "display_manager/display_manager"

###############################################################################
config("module_private_config") {
  visibility = [ ":*" ]

  include_dirs = [
    "include",
    "include/mock",
    "mock/include",
    "${displaymgr_inner_api}/native/include",
    "${displaymgr_root_path}/utils/native/include",
    "${displaymgr_service_zidl}/include",
    "${displaymgr_utils_path}/native/include",
  ]
}

deps_ex = [
  "ability_base:want",
  "ability_base:zuri",
  "ability_runtime:ability_manager",
  "c_utils:utils",
  "hilog:libhilog",
  "hisysevent:libhisysevent",
  "ipc:ipc_core",
  "power_manager:powermgr_client",
  "power_manager:power_setting",
  "safwk:system_ability_fwk",
  "samgr:samgr_proxy",
]

##############################unittest##########################################
ohos_unittest("unittest_display_mgr_service") {
  module_out_path = module_output_path

  defines += [ "GTEST" ]
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "../cfi_blocklist.txt"
  }

  sources = [
    "mock/src/mock_display_power_mgr_proxy.cpp",
    "mock/src/mock_display_remote_object.cpp",
    "src/display_power_mgr_brightness_test.cpp",
    "src/display_power_mgr_service_test.cpp",
    "${displaymgr_root_path}/utils/native/src/display_xcollie.cpp",
  ]

  configs = [
    "${displaymgr_utils_path}:utils_config",
    ":module_private_config",
    "${displaymgr_utils_path}:coverage_flags",
    "${displaymgr_root_path}/service:displaymgr_public_config",
  ]

  deps = [
    "${displaymgr_inner_api}:displaymgr",
    "${displaymgr_root_path}/service:displaymgr_proxy",
    "${displaymgr_root_path}/service:displaymgr_stub",
  ]

  external_deps = [
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_manager",
    "cJSON:cjson",
    "c_utils:utils",
    "data_share:datashare_consumer",
    "googletest:gtest_main",
    "hicollie:libhicollie",
    "hilog:libhilog",
    "ipc:ipc_core",
    "power_manager:power_setting",
    "power_manager:powermgr_client",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]
}

############################display_service_death_test#############################
ohos_unittest("display_service_death_test") {
  module_out_path = module_output_path

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "../cfi_blocklist.txt"
  }

  sources = [ "src/display_service_death_test.cpp" ]

  configs = [
    "${displaymgr_utils_path}:utils_config",
    ":module_private_config",
    "${displaymgr_utils_path}:coverage_flags",
    "${displaymgr_root_path}/service:displaymgr_public_config",
  ]

  defines += [ "DISPLAY_SERVICE_DEATH_UT" ]

  deps = [
    "${displaymgr_inner_api}:displaymgr",
    "${displaymgr_root_path}/service:displaymgr_proxy",
    "${displaymgr_root_path}/service:displaymgr_stub",
  ]

  external_deps = [ "googletest:gtest_main" ]
  external_deps += deps_ex
}

############################display_mock_parcel_test#############################
ohos_unittest("display_mock_parcel_test") {
  module_out_path = module_output_path

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "../cfi_blocklist.txt"
  }

  sources = [
    "mock/src/mock_message_parcel.cpp",
    "mock/src/mock_parcel.cpp",
    "src/mock/display_mock_parcel_test.cpp",
  ]

  configs = [
    "${displaymgr_utils_path}:utils_config",
    ":module_private_config",
    "${displaymgr_utils_path}:coverage_flags",
    "${displaymgr_root_path}/service:displaymgr_public_config",
  ]

  deps = [
    "${displaymgr_inner_api}:displaymgr",
    "${displaymgr_root_path}/service:displaymgr_proxy",
  ]
  external_deps = [ "googletest:gtest_main" ]
  external_deps += deps_ex
}

############################display_mock_test#############################
ohos_unittest("display_mock_test") {
  module_out_path = module_output_path

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "../cfi_blocklist.txt"
  }

  sources = [
    "mock/src/mock_display_remote_object.cpp",
    "mock/src/mock_message_parcel.cpp",
    "mock/src/mock_parcel.cpp",
    "src/mock/display_mock_test.cpp",
  ]

  configs = [
    "${displaymgr_utils_path}:utils_config",
    ":module_private_config",
    "${displaymgr_utils_path}:coverage_flags",
    "${displaymgr_root_path}/service:displaymgr_public_config",
  ]

  defines += [
    "MOCK_READSTRING_DESCRIPTIR",
    "MOCK_WRITE_INTERFACE_TOKEN_RETURN_TRUE",
  ]

  deps = [
    "${displaymgr_inner_api}:displaymgr",
    "${displaymgr_root_path}/service:displaymgr_proxy",
  ]

  external_deps = [ "googletest:gtest_main" ]
  external_deps += deps_ex
}

############################display_mock_object_test#############################
ohos_unittest("display_mock_object_test") {
  module_out_path = module_output_path

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "../cfi_blocklist.txt"
  }

  sources = [
    "mock/src/mock_display_remote_object.cpp",
    "src/mock/display_mock_object_test.cpp",
  ]

  configs = [
    "${displaymgr_utils_path}:utils_config",
    ":module_private_config",
    "${displaymgr_utils_path}:coverage_flags",
    "${displaymgr_root_path}/service:displaymgr_public_config",
  ]

  deps = [
    "${displaymgr_inner_api}:displaymgr",
    "${displaymgr_root_path}/service:displaymgr_proxy",
  ]

  external_deps = [ "googletest:gtest_main" ]
  external_deps += deps_ex
}

############################unittest_display_service_test#############################
ohos_unittest("unittest_display_service_test") {
  module_out_path = module_output_path

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "../cfi_blocklist.txt"
  }

  sources = [
    "src/display_service_test.cpp",
    "${displaymgr_utils_path}/native/src/display_xcollie.cpp",
    "${displaymgr_root_path}/service/native/src/display_auto_brightness.cpp",
    "${displaymgr_root_path}/service/native/src/display_common_event_mgr.cpp",
    "${displaymgr_root_path}/service/native/src/display_param_helper.cpp",
    "${displaymgr_root_path}/service/native/src/display_power_mgr_service.cpp",
    "${displaymgr_root_path}/service/native/src/display_setting_helper.cpp",
    "${displaymgr_root_path}/service/native/src/display_system_ability.cpp",
    "${displaymgr_root_path}/service/native/src/gradual_animator.cpp",
    "${displaymgr_root_path}/service/native/src/screen_action.cpp",
    "${displaymgr_root_path}/service/native/src/screen_controller.cpp",
    "${displaymgr_root_path}/service/zidl/src/display_brightness_callback_proxy.cpp",
    "${displaymgr_root_path}/service/zidl/src/display_power_callback_proxy.cpp",
  ]

  configs = [
    "${displaymgr_utils_path}:utils_config",
    ":module_private_config",
    "${displaymgr_utils_path}:coverage_flags",
    "${displaymgr_root_path}/service:displaymgr_private_config",
    "${displaymgr_root_path}/service:displaymgr_public_config",
  ]

  deps = [
    "${brightnessmgr_root_path}:brightness_manager",
    "${displaymgr_inner_api}:displaymgr",
    "${displaymgr_root_path}/service:displaymgrservice",
    "${displaymgr_root_path}/service:displaymgr_stub",
  ]

  external_deps = [ "power_manager:power_permission" ]

  external_deps += [
    "ability_base:zuri",
    "ability_runtime:ability_manager",
    "cJSON:cjson",
    "c_utils:utils",
    "data_share:datashare_consumer",
    "eventhandler:libeventhandler",
    "ffrt:libffrt",
    "googletest:gtest_main",
    "graphic_2d:librender_service_base",
    "hicollie:libhicollie",
    "hilog:libhilog",
    "image_framework:image_native",
    "ipc:ipc_core",
    "power_manager:power_ffrt",
    "power_manager:power_setting",
    "power_manager:power_sysparam",
    "power_manager:powermgr_client",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "skia:skia_canvaskit",
    "window_manager:libdm_lite",
  ]
  external_deps += deps_ex

  if (has_sensors_sensor_part) {
    external_deps += [ "sensor:sensor_interface_native" ]
    defines += [ "ENABLE_SENSOR_PART" ]
  }
  if (has_hiviewdfx_hisysevent_part) {
    external_deps += [ "hisysevent:libhisysevent" ]
  }
}

group("unittest") {
  testonly = true
  deps = [
    ":display_mock_object_test",
    ":display_mock_parcel_test",
    ":display_mock_test",
    ":display_service_death_test",
    ":unittest_display_service_test",
  ]
}
